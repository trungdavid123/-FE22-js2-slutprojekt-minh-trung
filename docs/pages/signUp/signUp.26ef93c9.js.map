{"mappings":"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","sources":["node_modules/@firebase/storage/src/implementation/constants.ts","node_modules/@firebase/storage/src/implementation/error.ts","node_modules/@firebase/storage/src/implementation/connection.ts","node_modules/@firebase/storage/src/implementation/location.ts","node_modules/@firebase/storage/src/implementation/failrequest.ts","node_modules/@firebase/storage/src/implementation/type.ts","node_modules/@firebase/storage/src/implementation/url.ts","node_modules/@firebase/storage/src/implementation/utils.ts","node_modules/@firebase/storage/src/implementation/request.ts","node_modules/@firebase/storage/src/implementation/backoff.ts","node_modules/@firebase/storage/src/implementation/fs.ts","node_modules/@firebase/storage/src/platform/browser/base64.ts","node_modules/@firebase/storage/src/implementation/string.ts","node_modules/@firebase/storage/src/implementation/blob.ts","node_modules/@firebase/storage/src/implementation/json.ts","node_modules/@firebase/storage/src/implementation/path.ts","node_modules/@firebase/storage/src/implementation/metadata.ts","node_modules/@firebase/storage/src/implementation/list.ts","node_modules/@firebase/storage/src/implementation/requestinfo.ts","node_modules/@firebase/storage/src/implementation/requests.ts","node_modules/@firebase/storage/src/platform/browser/connection.ts","node_modules/@firebase/storage/src/reference.ts","node_modules/@firebase/storage/src/service.ts","node_modules/@firebase/storage/src/constants.ts","node_modules/@firebase/storage/src/api.ts","node_modules/@firebase/storage/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * 1 second\n */\nexport const DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unique to the `StorageError`.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code: StorageErrorCode, message: string, private status_ = 0) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status(): number {\n    return this.status_;\n  }\n\n  set status(status: number) {\n    this.status_ = status;\n  }\n\n  /**\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nexport enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function missingPolyFill(polyFill: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNode } from '@firebase/util';\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\n  // PR: https://github.com/node-fetch/node-fetch/pull/1664\n  return typeof Blob !== 'undefined' && !isNode();\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nexport function isRetryStatusCode(\n  status: number,\n  additionalRetryCodes: number[]\n): boolean {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429\n  ];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\nimport { isRetryStatusCode } from './utils';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>,\n    private retry = true\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (\n        progressEvent: ProgressEvent\n      ) => void = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (\n            !hitServer ||\n            (isRetryStatusCode(status, this.additionalRetryCodes_) &&\n              this.retry)\n          ) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string,\n  retry = true\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory,\n    retry\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nexport function start(\n  doRequest: (\n    onRequestComplete: (success: boolean) => void,\n    canceled: boolean\n  ) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  backoffCompleteCb: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { missingPolyFill } from '../../implementation/error';\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if ((e as Error).message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr: StorageError;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null,\n    retry = true\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion,\n        retry\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport {\n  EmulatorMockTokenOptions,\n  getModularInstance,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\nexport { StorageError, StorageErrorCode } from './implementation/error';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"],"names":["$df9a6d7fd06616c9$var$DEFAULT_HOST","$df9a6d7fd06616c9$var$CONFIG_STORAGE_BUCKET_KEY","$df9a6d7fd06616c9$export$697502632950e9d3","$gMVVg","FirebaseError","constructor","code","message","status_","super","$df9a6d7fd06616c9$var$prependCode","this","customData","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","status","_codeEquals","$df9a6d7fd06616c9$export$54592d666d6ce114","StorageErrorCode","$df9a6d7fd06616c9$var$ErrorCode","ErrorCode","$df9a6d7fd06616c9$var$unknown","UNKNOWN","$df9a6d7fd06616c9$var$retryLimitExceeded","RETRY_LIMIT_EXCEEDED","$df9a6d7fd06616c9$var$canceled","CANCELED","$df9a6d7fd06616c9$var$cannotSliceBlob","CANNOT_SLICE_BLOB","$df9a6d7fd06616c9$export$8f74d9881d1936fd","INVALID_ARGUMENT","$df9a6d7fd06616c9$var$appDeleted","APP_DELETED","$df9a6d7fd06616c9$var$invalidFormat","format","INVALID_FORMAT","$df9a6d7fd06616c9$var$internalError","INTERNAL_ERROR","$df9a6d7fd06616c9$export$adb98fff6714334","bucket","path","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","static","bucketString","host","bucketLocation","makeFromUrl","e","INVALID_DEFAULT_BUCKET","url","location","bucketDomain","gsRegex","RegExp","httpModify","loc","decodeURIComponent","firebaseStorageHost","replace","groups","regex","indices","postModify","charAt","slice","i","group","captures","exec","bucketValue","pathValue","INVALID_URL","$df9a6d7fd06616c9$var$invalidUrl","$df9a6d7fd06616c9$var$FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","$df9a6d7fd06616c9$var$isString","p","String","$df9a6d7fd06616c9$var$isNativeBlob","$df9a6d7fd06616c9$var$isNativeBlobDefined","Blob","isNode","$df9a6d7fd06616c9$var$validateNumber","argument","minValue","maxValue","value","$df9a6d7fd06616c9$var$makeUrl","urlPart","protocol","origin","$df9a6d7fd06616c9$var$makeQueryString","params","queryPart","key","hasOwnProperty","$df9a6d7fd06616c9$var$isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","isExtraRetryCode","indexOf","isAdditionalRetryCode","$df9a6d7fd06616c9$var$NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","backoffDone","requestWentThrough","connection","wasSuccessCode","result","getResponse","err","getErrorText","canceled","$df9a6d7fd06616c9$var$RequestEndStatus","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","call","waitMillis","Math","random","stopped","stop","wasTimeout","$df9a6d7fd06616c9$var$start","backoffCallback","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","wasCanceled","ABORT","successCode","appDelete","$df9a6d7fd06616c9$var$stop","abort","getBlob","BlobBuilder1","BlobBuilder","WebKitBlobBuilder","undefined","bb","append","UNSUPPORTED_ENVIRONMENT","$df9a6d7fd06616c9$var$decodeBase64","encoded","atob","polyFill","$df9a6d7fd06616c9$export$f22e7fe56db8ae03","RAW","BASE64","BASE64URL","DATA_URL","$df9a6d7fd06616c9$var$StringData","data","contentType","$df9a6d7fd06616c9$export$d80b9b5a2ccdd3e0","stringData","$df9a6d7fd06616c9$var$utf8Bytes_","$df9a6d7fd06616c9$var$base64Bytes_","dataUrl","parts","$df9a6d7fd06616c9$var$DataURLParts","base64","rest","decoded","$df9a6d7fd06616c9$var$percentEncodedBytes_","$df9a6d7fd06616c9$var$dataURLBytes_","b","c","charCodeAt","push","Uint8Array","hasMinus","hasUnder","hasPlus","hasSlash","bytes","includes","array","dataURL","matches","match","middle","s","end","substring","$df9a6d7fd06616c9$export$8deea8629ff0b8a7","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","start","blob","webkitSlice","mozSlice","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","uploadData","$df9a6d7fd06616c9$var$jsonObjectOrNull","obj","JSON","parse","Array","isArray","$df9a6d7fd06616c9$var$lastComponent","lastIndexOf","$df9a6d7fd06616c9$var$noXform_","metadata","$df9a6d7fd06616c9$var$Mapping","server","local","writable","xform","$df9a6d7fd06616c9$var$mappings_","$df9a6d7fd06616c9$var$getMappings","mappings","nameMapping","_metadata","fullPath","$df9a6d7fd06616c9$var$xformPath","sizeMapping","Number","$df9a6d7fd06616c9$var$fromResource","service","resource","len","mapping","defineProperty","get","_makeStorageReference","$df9a6d7fd06616c9$var$addRef","$df9a6d7fd06616c9$var$fromResourceString","resourceString","$df9a6d7fd06616c9$var$toResourceString","stringify","$df9a6d7fd06616c9$var$PREFIXES_KEY","$df9a6d7fd06616c9$var$ITEMS_KEY","$df9a6d7fd06616c9$var$fromResponseString","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","$df9a6d7fd06616c9$var$fromBackendResponse","$df9a6d7fd06616c9$var$RequestInfo","method","handler","urlParams","headers","body","errorHandler","progressCallback","successCodes","$df9a6d7fd06616c9$var$handlerCheck","cndn","$df9a6d7fd06616c9$var$metadataHandler","xhr","text","$df9a6d7fd06616c9$var$downloadUrlHandler","tokens","split","token","alt","$df9a6d7fd06616c9$var$downloadUrlFromResourceString","_protocol","$df9a6d7fd06616c9$var$sharedErrorHandler","newErr","UNAUTHORIZED_APP","UNAUTHENTICATED","QUOTA_EXCEEDED","UNAUTHORIZED","$df9a6d7fd06616c9$var$objectErrorHandler","shared","OBJECT_NOT_FOUND","list","delimiter","pageToken","maxResults","maxOperationRetryTime","requestInfo","$df9a6d7fd06616c9$var$listHandler","$df9a6d7fd06616c9$var$metadataForUpload_","metadataClone","assign","$df9a6d7fd06616c9$var$determineContentType_","$df9a6d7fd06616c9$var$multipartUpload","boundary","str","toString","genBoundary","metadata_","preBlobPart","postBlobPart","name","maxUploadRetryTime","$df9a6d7fd06616c9$var$textFactoryOverride","$df9a6d7fd06616c9$var$XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","getResponseHeader","header","listener","upload","removeEventListener","$df9a6d7fd06616c9$var$XhrTextConnection","responseType","$df9a6d7fd06616c9$var$newTextConnection","$df9a6d7fd06616c9$var$Reference","_service","_location","_newRef","root","storage","parent","newPath","$df9a6d7fd06616c9$var$parent","_throwIfRoot","INVALID_ROOT_OPERATION","$df9a6d7fd06616c9$export$61f54cdc36500ad","uploadBytes","ref","makeRequestWithTokens","finalMetadata","listAll","accumulator","$df9a6d7fd06616c9$var$listAllHelper","async","opt","nextPage","options","op","requestsList","getDownloadURL","requestsGetDownloadUrl","NO_DOWNLOAD_URL","_getChild","childPath","canonicalChildPath","filter","component","join","$df9a6d7fd06616c9$var$child","$df9a6d7fd06616c9$var$refFromPath","$df9a6d7fd06616c9$var$FirebaseStorageImpl","_bucket","NO_DEFAULT_BUCKET","serviceOrRef","pathOrUrl","test","$df9a6d7fd06616c9$var$extractBucket","config","makeFromBucketSpec","app","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","_overrideAuthToken","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","_delete","request","clear","_makeRequest","requestFactory","authToken","appCheckToken","appId","firebaseVersion","$df9a6d7fd06616c9$var$addGmpidHeader_","$df9a6d7fd06616c9$var$addAuthHeader_","$df9a6d7fd06616c9$var$addVersionHeader_","$df9a6d7fd06616c9$var$addAppCheckHeader_","$df9a6d7fd06616c9$var$makeRequest","add","delete","all","_getAuthToken","_getAppCheckToken","$df9a6d7fd06616c9$var$STORAGE_TYPE","$df9a6d7fd06616c9$export$ac40f56b52f99dd1","uploadBytesInternal","getModularInstance","$df9a6d7fd06616c9$export$6a265a7d315dec03","listAllInternal","$df9a6d7fd06616c9$export$c8bf645a0c2a7d9f","getDownloadURLInternal","$df9a6d7fd06616c9$export$eff4d24c3ff7876e","refInternal","$df9a6d7fd06616c9$export$fbd9b57a66480737","$7xvHX","getApp","bucketUrl","storageInstance","_getProvider","identifier","emulator","getDefaultEmulatorHostnameAndPort","port","mockUserToken","createMockUserToken","projectId","connectEmulatorInternal","$df9a6d7fd06616c9$export$9850e656f954b889","$df9a6d7fd06616c9$var$factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","_registerComponent","$eryG9","Component","setMultipleInstances","registerVersion","$df9a6d7fd06616c9$var$name","$df9a6d7fd06616c9$var$version"],"version":3,"file":"signUp.26ef93c9.js.map"}