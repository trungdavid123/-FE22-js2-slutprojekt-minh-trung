{"mappings":"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","sources":["src/pages/profile/app.ts"],"sourcesContent":["import { collection, deleteDoc, doc, getDoc, getDocs, getFirestore, onSnapshot, query, updateDoc, where, writeBatch } from \"firebase/firestore\";\r\nimport { Post, User } from \"../home/app\";\r\nimport { EmailAuthProvider, GoogleAuthProvider, getAuth, reauthenticateWithCredential, signOut, signInWithPopup, deleteUser } from \"firebase/auth\";\r\nimport { getStorage, ref, getDownloadURL, listAll } from \"firebase/storage\";\r\n\r\n\r\nlet postId = \"\";\r\nconst db = getFirestore();\r\nconst colRef = collection(db, 'posts');\r\nconst idParams = new URLSearchParams(location.search);\r\nconst user = localStorage.getItem('user');\r\nconst avatar = document.querySelector('.avatar') as HTMLImageElement;\r\nconst userName = document.querySelector('.user-name') as HTMLElement;\r\nconst parsedUser = user ? JSON.parse(user) : null;\r\nconst signOutBtn = document.querySelector('.sign-out') as HTMLButtonElement;\r\nconst nameProfile = document.querySelector('.info h3') as HTMLElement;\r\nconst avatarProfile = document.querySelector('.avatar-profile img') as HTMLImageElement;\r\nconst imgContainer = document.querySelector('.img-content');\r\nconst container = document.querySelector('.posts-container') as HTMLElement;\r\nconst homeLink = document.querySelector('.link') as HTMLAnchorElement;\r\nconst deleteContainer = document.querySelector('.profile-main') as HTMLElement;\r\nconst userInfoContainer = document.querySelector('.user-navbar') as HTMLElement;\r\nconst storage = getStorage();\r\nconst auth = getAuth();\r\n\r\nif (!user) window.location.href = '/';\r\n\r\nif (user) {\r\n    userName.innerHTML = parsedUser.name || parsedUser.displayName || parsedUser.email.split(\"@\")[0];\r\n    avatar.src = parsedUser.photoURL ? parsedUser.photoURL : \"https://www.w3schools.com/howto/img_avatar.png\";\r\n}\r\n\r\nhomeLink.innerHTML = `\r\n    <a href=\"../home/home.html\" class=\"navbar-brand link\">Y.C</a>\r\n`\r\n\r\nonSnapshot(colRef, (snapshot) => {\r\n    let posts: Post[] = [];\r\n\r\n    snapshot.docs.forEach((doc) => {\r\n        for (const value of idParams.values()) {\r\n            if (value === doc.data().createdBy) {\r\n                console.log(doc)\r\n                posts.push({\r\n                    ...doc.data() as Post, id: doc.id\r\n                });\r\n            }\r\n        }\r\n    })\r\n\r\n    if (posts.length === 0) return container!.innerHTML = \"<h3 style='border: 1px solid; padding: 1rem; border-radius: 10px'>The user has not made any posts yet</h3>\";\r\n\r\n\r\n    showPosts(posts);\r\n\r\n    const loveBtns = document.querySelectorAll('.love-btn');\r\n\r\n    loveBtns.forEach((loveBtn, idx) => {\r\n        loveBtn.addEventListener('click', (e: Event) => {\r\n            const id = posts[idx].id;\r\n            let loveQuantity = posts[idx].love;\r\n            let isLovedBy = posts[idx].isLoved;\r\n            const isMatched = isLovedBy?.some((lovedBy) => lovedBy.uid === parsedUser.uid)\r\n\r\n            console.log(isLovedBy)\r\n\r\n            postId = id;\r\n            const postRef = doc(db, \"posts\", id);\r\n\r\n            if (isMatched) {\r\n                console.log('Matched')\r\n                updateDoc(postRef, {\r\n                    love: loveQuantity - 1,\r\n                    isLoved: (isLovedBy as User[]).filter((lovedBy) => lovedBy.uid !== parsedUser.uid)\r\n                })\r\n\r\n            } else {\r\n                console.log('No matched')\r\n                updateDoc(postRef, {\r\n                    love: loveQuantity + 1,\r\n                    isLoved: [...isLovedBy, parsedUser]\r\n                })\r\n            }\r\n        })\r\n    })\r\n})\r\n\r\nconst showProfile = () => {\r\n    for (const value of idParams.values()) {\r\n        const userRef = doc(db, \"users\", value);\r\n\r\n        getDoc(userRef).then((docSnapshot) => {\r\n            const user = docSnapshot.data();\r\n            if (parsedUser.uid === value || parsedUser.email === user?.email) {\r\n                const btn = document.createElement('div');\r\n                const span = document.createElement('span');\r\n                btn.appendChild(span);\r\n                btn.classList.add('delete-btn');\r\n                span.innerText = 'Delete my account';\r\n                deleteContainer.append(btn)\r\n\r\n                btn.addEventListener('click', () => {\r\n                    const user = auth.currentUser;\r\n                    if (user) {\r\n                        const providerData = user.providerData;\r\n                        if (providerData.length > 0) {\r\n                            providerData.forEach((userInfo) => {\r\n                                if (userInfo.providerId === 'google.com') {\r\n                                    const provider = new GoogleAuthProvider();\r\n                                    signInWithPopup(auth, provider)\r\n                                        .then((result) => {\r\n                                            const credential = GoogleAuthProvider.credentialFromResult(result);\r\n                                            if (credential) {\r\n                                                reauthenticateWithCredential(user, credential).then(() => {\r\n                                                    deleteUser(user).then(() => {\r\n                                                        clearPostsAfterDelete(value)\r\n                                                        deleteDoc(userRef).then(() => {\r\n                                                            window.location.href = '/'\r\n                                                            localStorage.removeItem('user');\r\n                                                            console.log('User deleted');\r\n                                                        });\r\n\r\n                                                    })\r\n                                                }).catch((error) => {\r\n                                                    console.log(error)\r\n                                                });\r\n                                            }\r\n                                        })\r\n                                        .then(() => {\r\n                                            console.log('Successfully signed in with Google');\r\n                                        })\r\n                                        .catch((error) => {\r\n                                            console.error(error);\r\n                                        });\r\n                                } else if (userInfo.providerId === 'password') {\r\n\r\n                                    const email = prompt('Enter your email:');\r\n                                    const password = prompt('Enter your password:');\r\n\r\n                                    if (user && email && password) {\r\n                                        const credential = EmailAuthProvider.credential(email, password);\r\n\r\n                                        reauthenticateWithCredential(user, credential).then(() => {\r\n                                            deleteUser(user).then(() => {\r\n                                                clearPostsAfterDelete(value); \r\n                                                deleteDoc(userRef).then(() => {\r\n                                                    window.location.href = '/'\r\n                                                    localStorage.removeItem('user');\r\n                                                    console.log('User deleted');\r\n                                                });\r\n                                            })\r\n                                        }).catch((error) => {\r\n                                            console.log(error)\r\n                                        });\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                })\r\n            }\r\n\r\n            nameProfile.innerText = user?.displayName || user?.email.split(\"@\")[0];\r\n            avatarProfile.src = user?.photoURL ? user.photoURL : \"https://www.w3schools.com/howto/img_avatar.png\"\r\n        })\r\n    }\r\n}\r\n\r\nshowProfile()\r\n\r\nconst showPosts = (posts: Post[]) => {\r\n    container.innerHTML = \"\";\r\n\r\n    posts.map((post) => {\r\n        const element = ` <div class=\"card w-100 mb-3\"> <div class=\"card-body\"><a href=\"#\" class=\"d-flex align-items-center gap-2 mb-3\">\r\n        <img class=\"avatar\" style=\"width: 30px; height: 30px;\"\r\n            src=\"${post.photoURL ? post.photoURL : \"https://www.w3schools.com/howto/img_avatar.png\"}\" alt=\"user\">\r\n        <p class=\"user-name\">${post.name || post.displayName}</p>\r\n        </a>\r\n        <h5 class=\"card-title\">${post.title}</h5>\r\n        <p class=\"card-text\">${post.msg}</p>\r\n            <div class=\"d-flex align-items-center gap-2\">\r\n               <i class=\"love-btn bi bi-heart${post.isLoved?.some((lovedBy) => lovedBy.uid === parsedUser.uid) ? \"-fill\" : ''}\"></i> ${post.love}\r\n            </div>\r\n        </div></div>`;\r\n\r\n\r\n        container.innerHTML += element;\r\n    })\r\n}\r\n\r\nconst clearPostsAfterDelete = async (id: string) => {\r\n    const batch = writeBatch(db);\r\n    const postsQuery = query(\r\n        collection(db, \"posts\"),\r\n        where(\"createdBy\", \"==\", id)\r\n    );\r\n    const postsQuerySnapshot = await getDocs(postsQuery);\r\n\r\n    postsQuerySnapshot.forEach((doc) => {\r\n        batch.delete(doc.ref);\r\n        console.log(doc.ref)\r\n    });\r\n\r\n    await batch.commit();\r\n    console.log(`Deleted ${postsQuerySnapshot.size} posts created by user with id ${id}`);\r\n}\r\n\r\nsignOutBtn.addEventListener('click', () => {\r\n    signOut(auth).then(() => {\r\n        window.location.href = '/';\r\n        localStorage.removeItem('user');\r\n    }).catch((error) => {\r\n        console.log(error.message);\r\n    })\r\n})\r\n\r\n\r\n\r\nfunction displayImages() {\r\n    for (const value of idParams.values()) {\r\n\r\n        const userRef = doc(db, \"users\", value);\r\n\r\n        getDoc(userRef).then((docSnapshot) => {\r\n            const user = docSnapshot.data();\r\n            console.log(value)\r\n            const storageRef = ref(storage, `/users/${user!.id}/images`)\r\n\r\n            listAll(storageRef)\r\n                .then((res) => {\r\n                    if (res.items.length === 0) return imgContainer!.innerHTML = \"<p>No images found</p>\";\r\n                    res.items.forEach((itemRef) => {\r\n                        getDownloadURL(itemRef)\r\n                            .then((url) => {\r\n                                const imgBox = document.createElement('img');\r\n                                imgBox.classList.add('img-box');\r\n                                imgBox.src = url;\r\n\r\n                                imgContainer?.append(imgBox);\r\n                            })\r\n                            .catch((error) => {\r\n                                console.log(error.message);\r\n                            })\r\n\r\n                    });\r\n                }).catch((error) => {\r\n                    console.log(error.message);\r\n                });\r\n\r\n        })\r\n    }\r\n}\r\n\r\nuserInfoContainer.addEventListener('click', (e) => {\r\n    window.location.href = `../profile/profile.html?id=${parsedUser.uid}`;\r\n})\r\n\r\n\r\ndisplayImages();"],"names":["$ilpIi","parcelRequire","$3226d5bb8657d51a$var$postId","$3226d5bb8657d51a$var$db","getFirestore","$3226d5bb8657d51a$var$colRef","collection","$3226d5bb8657d51a$var$idParams","URLSearchParams","location","search","$3226d5bb8657d51a$var$user","localStorage","getItem","$3226d5bb8657d51a$var$avatar","document","querySelector","$3226d5bb8657d51a$var$userName","$3226d5bb8657d51a$var$parsedUser","JSON","parse","$3226d5bb8657d51a$var$signOutBtn","$3226d5bb8657d51a$var$nameProfile","$3226d5bb8657d51a$var$avatarProfile","$3226d5bb8657d51a$var$imgContainer","$3226d5bb8657d51a$var$container","$3226d5bb8657d51a$var$homeLink","$3226d5bb8657d51a$var$deleteContainer","$3226d5bb8657d51a$var$userInfoContainer","$3226d5bb8657d51a$var$storage","$fCOdq","getStorage","$3226d5bb8657d51a$var$auth","$6AR8M","getAuth","window","href","innerHTML","name","displayName","email","split","src","photoURL","onSnapshot","snapshot","posts","docs","forEach","doc","value","values","data","createdBy","console","log","push","id","length","$3226d5bb8657d51a$var$showPosts","querySelectorAll","loveBtn","idx","addEventListener","e","loveQuantity","love","isLovedBy","isLoved","isMatched","some","lovedBy","uid","postRef","updateDoc","filter","userRef","getDoc","then","docSnapshot","user","btn","createElement","span","appendChild","classList","add","innerText","append","currentUser","providerData","userInfo","providerId","provider","GoogleAuthProvider","signInWithPopup","result","credential","credentialFromResult","reauthenticateWithCredential","deleteUser","$3226d5bb8657d51a$var$clearPostsAfterDelete","deleteDoc","removeItem","catch","error","prompt","password","EmailAuthProvider","$3226d5bb8657d51a$var$showProfile","map","post","element","title","msg","async","batch","writeBatch","postsQuery","query","where","postsQuerySnapshot","getDocs","delete","ref","commit","size","signOut","message","storageRef","listAll","res","items","itemRef","getDownloadURL","url","imgBox","$3226d5bb8657d51a$var$displayImages"],"version":3,"file":"profile.c205f57e.js.map"}